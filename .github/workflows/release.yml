  # https://github.com/actions/create-release/issues/14

name: Create release when appropriately tagged and upload builds
on: push
defaults:
  run:
    shell: bash

jobs:
  release:
    name: Create release and provide URL to it
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
          body: |
            resolved multiple bugs relating to [Clustering and Deleting Collections Issues....](https://github.com/dmusican/enchilada/issues/16)
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  publish:
    if: contains(github.ref, 'tags/v')
    needs: release
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Put release URL into a variable
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '14' # The JDK version to make available on the path.
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64 # (x64 or x86) - defaults to x64
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Checkout
        uses: actions/checkout@v2
      - name: Run headless test
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: mvn --no-transfer-progress test
      - name: Build jar
        run: mvn --no-transfer-progress clean compile assembly:single
      - name: Get project version and set icon file name
        run: |
          echo "PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV
          echo "ICON_FILENAME=enchilada-icon.png" >> $GITHUB_ENV
      - name: Set Windows-specific options
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "ICON_FILENAME=enchilada-icon.ico" >> $GITHUB_ENV
          echo "OS_BUILD_OPTIONS=--win-menu --win-shortcut --win-console" >> $GITHUB_ENV
      - name: Show project version and make build
        run: |
          echo here-it-is-$PROJECT_VERSION
          echo $ICON_FILENAME
          jpackage --input target/ --name Enchilada --main-jar enchilada-$PROJECT_VERSION-jar-with-dependencies.jar \
                    --icon ${{ env.ICON_FILENAME }} --app-version $PROJECT_VERSION ${{ env.OS_BUILD_OPTIONS }}
          ls
      - name: Get install file for Linux
        if: ${{ matrix.os =='ubuntu-latest' }}
        run: |
          echo "ICON_FILENAME=enchilada-icon.jpg" >> $GITHUB_ENV
          echo "OUTPUT_FILENAME=$(ls *.deb)" >> $GITHUB_ENV
      - name: Get install file for Mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          echo "OUTPUT_FILENAME=$(ls *.dmg)" >> $GITHUB_ENV
      - name: Get install file for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "ICON_FILENAME=enchilada-icon.ico" >> $GITHUB_ENV
          echo "OUTPUT_FILENAME=$(ls *.exe)" >> $GITHUB_ENV
      - name: Check output filenames
        run: |
          echo $OUTPUT_FILENAME

      - name: Upload build to release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./${{ env.OUTPUT_FILENAME }}
          asset_name: ${{ env.OUTPUT_FILENAME }}
          asset_content_type: application/octet-stream


